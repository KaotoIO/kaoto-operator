/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kaotoIO/kaoto-operator/apis/designer/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KaotoLister helps list Kaotoes.
// All objects returned here must be treated as read-only.
type KaotoLister interface {
	// List lists all Kaotoes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Kaoto, err error)
	// Kaotoes returns an object that can list and get Kaotoes.
	Kaotoes(namespace string) KaotoNamespaceLister
	KaotoListerExpansion
}

// kaotoLister implements the KaotoLister interface.
type kaotoLister struct {
	indexer cache.Indexer
}

// NewKaotoLister returns a new KaotoLister.
func NewKaotoLister(indexer cache.Indexer) KaotoLister {
	return &kaotoLister{indexer: indexer}
}

// List lists all Kaotoes in the indexer.
func (s *kaotoLister) List(selector labels.Selector) (ret []*v1alpha1.Kaoto, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kaoto))
	})
	return ret, err
}

// Kaotoes returns an object that can list and get Kaotoes.
func (s *kaotoLister) Kaotoes(namespace string) KaotoNamespaceLister {
	return kaotoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KaotoNamespaceLister helps list and get Kaotoes.
// All objects returned here must be treated as read-only.
type KaotoNamespaceLister interface {
	// List lists all Kaotoes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Kaoto, err error)
	// Get retrieves the Kaoto from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Kaoto, error)
	KaotoNamespaceListerExpansion
}

// kaotoNamespaceLister implements the KaotoNamespaceLister
// interface.
type kaotoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kaotoes in the indexer for a given namespace.
func (s kaotoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kaoto, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kaoto))
	})
	return ret, err
}

// Get retrieves the Kaoto from the indexer for a given namespace and name.
func (s kaotoNamespaceLister) Get(name string) (*v1alpha1.Kaoto, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kaoto"), name)
	}
	return obj.(*v1alpha1.Kaoto), nil
}
